#summary This page explains how to use JavaStruct library.
#labels Featured,Phase-Implementation

= Introduction =

= General usage =

*JavaStruct* fa√ßade class is used to pack and unpack struct classes. Below is a simple unit test method for checking a struct class. 

{{{
	public void testPublicPrimitives(){
		PublicPrimitives pp = new PublicPrimitives();
		// Change some fields in object;
		try {
			byte[] b = JavaStruct.pack(pp);
			PublicPrimitives pp2 = new PublicPrimitives();
			assertFalse(pp.equals(pp2));
			JavaStruct.unpack(pp2, b);
			assertTrue(pp.equals(pp2));
		} catch (StructException e) {
			e.printStackTrace();
			fail();
		}
	}
}}}

= Primitives and Arrays =

Using primitives. Note that private and protected fields requires appropriate getter and setter methods. Transient fields are automatically excluded.

{{{
@StructClass
public class PublicPrimitives implements Serializable {
	@StructField(order = 0)
	public byte b;

	@StructField(order = 1)
	public char c;

	@StructField(order = 2)
	public short s;

	@StructField(order = 3)
	public int i;

	@StructField(order = 4)
	public long lo;

	@StructField(order = 5)
	protected float f;

	@StructField(order = 6)
	private double d;

	transient int blah;
	transient double foo;


	public float getF() {
		return f;
	}

	public void setF(float f) {
		this.f = f;
	}

	public double getD() {
		return d;
	}

	public void setD(double d) {
		this.d = d;
	}

	public boolean equals(Object o){
		PublicPrimitives other = (PublicPrimitives)o;
		return (this.b == other.b 
			&& this.c == other.c
			&& this.s == other.s
			&& this.i == other.i
			&& this.lo == other.lo
			&& this.f == other.f
			&& this.d == other.d);
	}
}
}}}

= Arrays =

Arrays have some prerequisites